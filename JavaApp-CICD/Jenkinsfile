pipeline {
    agent any
    tools {
        jdk 'jdk17'
        maven 'maven3'
    }
    environment {
        SCANNER_HOME = tool 'sonar-scanner'
    }
    stages {
        stage('Clean workspace') {
            steps {
                cleanWs()
            }
        }
        stage('Checkout from Git') {
            steps {
                git branch: 'main', url: 'https://github.com/ManideepM777/JavaApp-CICD.git'
            }
        }
        stage('Maven compile') {
            steps {
                script {
                    dir('JavaApp-CICD') {
                        sh 'mvn clean compile'
                    }
                }
            }
        }
        stage('Maven test') {
            steps {
                script {
                    dir('JavaApp-CICD') {
                        sh 'mvn test'
                    }
                }
            }
        }
        stage('SonarQube Analysis') {
            steps {
                withSonarQubeEnv('sonar-server') {
                    script {
                        dir('JavaApp-CICD') {
                            sh ''' 
                                $SCANNER_HOME/bin/sonar-scanner \
                                -Dsonar.projectName=Pet-Clinic \
                                -Dsonar.projectKey=Petclinic \
                                -Dsonar.java.binaries=target/classes
                            '''
                        }
                    }
                }
            }
        }
        stage('Quality Gate') {
            steps {
                script {
                    waitForQualityGate abortPipeline: false, credentialsId: 'Sonar-token'
                }
            }
        }
        stage('Maven build') {
            steps {
                script {
                    dir('JavaApp-CICD') {
                        sh 'mvn clean install'
                    }
                }
            }
        }
        stage('OWASP Dependency Check') {
            steps {
                dependencyCheck additionalArguments: '--scan ./ --format HTML ./ --nvdApiKey $NVD_API_KEY', odcInstallation: 'dp-check'
                dependencyCheckPublisher pattern: '**/dependency-check-report.html'
            }
        }
        stage('Docker Build & Push') {
            steps {
                script {
                    withDockerRegistry(credentialsId: 'docker', toolName: 'docker') {
                        sh 'docker build -t petclinic1 .'
                        sh 'docker tag petclinic1 manideepm777/petclinic:latest'
                        sh 'docker push manideepm777/petclinic:latest'
                    }
                }
            }
        }
        stage('Trivy Scan') {
            steps {
                sh 'trivy image manideepm777/petclinic:latest > trivy.txt'
            }
        }
        stage('Clean up containers') {
            steps {
                script {
                    try {
                        sh 'docker stop pet1'
                        sh 'docker rm pet1'
                    } catch (Exception e) {
                        echo 'Container pet1 not found, moving to next stage'
                    }
                }
            }
        }
        stage('Manual Approval') {
            steps {
                script {
                    timeout(time: 10, unit: 'MINUTES') {
                        def approvalMailContent = """
                            Project: ${env.JOB_NAME}
                            Build Number: ${env.BUILD_NUMBER}
                            Go to build URL and approve the deployment request.
                            URL de build: ${env.BUILD_URL}
                        """
                        mail(
                            to: 'manideepmavillapalli@gmail.com',
                            subject: "${currentBuild.result} CI: Project name -> ${env.JOB_NAME}",
                            body: approvalMailContent,
                            mimeType: 'text/plain'
                        )
                        input(
                            id: 'DeployGate',
                            message: 'Deploy ${params.project_name}?',
                            submitter: 'approver',
                            parameters: [
                                choice(name: 'action', choices: ['Deploy'], description: 'Approve deployment')
                            ]
                        )
                    }
                }
            }
        }
        stage('Deploy to Container') {
            steps {
                sh 'docker run -d --name pet1 -p 8082:8080 sreedhar8897/petclinic:latest'
            }
        }
        stage('Deploy to Tomcat') {
            steps {
                sh 'sudo cp /var/lib/jenkins/workspace/Pet-Clinic/target/petclinic.war /opt/apache-tomcat-9.0.65/webapps/'
            }
            post {
                always {
                    emailext(
                        attachLog: true,
                        subject: "'${currentBuild.result}'",
                        body: "Project: ${env.JOB_NAME}<br/>" +
                            "Build Number: ${env.BUILD_NUMBER}<br/>" +
                            "URL: ${env.BUILD_URL}<br/>",
                        to: 'manideepmavillapalli@gmail.com',
                        attachmentsPattern: 'trivy.txt'
                    )
                }
            }
        }
    }
}
